plot(Total_I_Array[5,])
plot(Total_I_Array[6,])
x = SimnData2[[1]]
Total_I = SimnData2[[2]]
SummStatIterNum_row = nrow(ObservedData)
SummStatIterNum_col = ncol(ObservedData)
TempSum = 0.0
for (ii in 1:SummStatIterNum_row){
for (jj in 1:SummStatIterNum_col){
if (ObservedData[ii,jj] != 0){
TempSum = TempSum + (ObservedData[ii,jj]*log(ObservedData[ii,jj]/x[ii,jj])) - (ObservedData[ii,jj] - x[ii,jj]) # calculate Poisson devinace
}
}
}
SummStatVal_Overall = 2*(TempSum + sum(x[ObservedData==0]))
#Perform temporal check
NumOfSeasons = as.integer(length(Total_I)/366) #%Number of seasons obtained by dividing number of daily records by days in yr (+1 to account for day 0 recording1)
Total_I_Array = matrix(0,NumOfSeasons,366)
for (jj in 1:NumOfSeasons){
StartIdx = ((jj-1)*366) + 1
EndIdx = jj*366
Total_I_Array[jj,] = Total_I[StartIdx:EndIdx]
}
#Find day of seasonal year in which infection is at peak
MaxInfValBySeason = apply(Total_I_Array[4:nrow(Total_I_Array),],1,max) #MaxInfValBySeason,inds = findmax(Total_I_Array[4:nrow(Total_I_Array),],2)
MaxInfIdxBySeason = apply(Total_I_Array[4:nrow(Total_I_Array),],1,function(x) which(x == max(x))) #MaxInfIdxBySeason = map(x->ind2sub(Total_I_Array[4:nrow(Total_I_Array),], x)[2], inds)
MaxInfIdxBySeason
ObvsDataTemp
x = SimnData2[[1]]
Total_I = SimnData2[[2]]
SummStatIterNum_row = nrow(ObservedData)
SummStatIterNum_col = ncol(ObservedData)
TempSum = 0.0
for (ii in 1:SummStatIterNum_row){
for (jj in 1:SummStatIterNum_col){
if (ObservedData[ii,jj] != 0){
TempSum = TempSum + (ObservedData[ii,jj]*log(ObservedData[ii,jj]/x[ii,jj])) - (ObservedData[ii,jj] - x[ii,jj]) # calculate Poisson devinace
}
}
}
SummStatVal_Overall = 2*(TempSum + sum(x[ObservedData==0]))
#Perform temporal check
NumOfSeasons = as.integer(length(Total_I)/366) #%Number of seasons obtained by dividing number of daily records by days in yr (+1 to account for day 0 recording1)
Total_I_Array = matrix(0,NumOfSeasons,366)
for (jj in 1:NumOfSeasons){
StartIdx = ((jj-1)*366) + 1
EndIdx = jj*366
Total_I_Array[jj,] = Total_I[StartIdx:EndIdx]
}
#Find day of seasonal year in which infection is at peak
MaxInfValBySeason = apply(Total_I_Array[4:nrow(Total_I_Array),],1,max) #MaxInfValBySeason,inds = findmax(Total_I_Array[4:nrow(Total_I_Array),],2)
MaxInfIdxBySeason = apply(Total_I_Array[4:nrow(Total_I_Array),],1,function(x) which(x == max(x))) #MaxInfIdxBySeason = map(x->ind2sub(Total_I_Array[4:nrow(Total_I_Array),], x)[2], inds)
MaxInfIdxBySeason
R.Version()
3*0.2632
X <- rpois(100, 10)
X
r <- rnorm(100,0,1)
X <- rpois(100, 10)
r <- rnorm(100,0,1)
Y <- X + r
library(keras)
library(rstan)
library(ggplot2)
library(reshape2) # for melt()
library(BioStatR)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# Set working directory
setwd("/Users/kyulee/Google Drive/Z Drive/Postdoc_UPitt/Calibration/ANN_BUGS_Cleaned/")
setwd("/Users/kyulee/Google Drive/Z Drive/Postdoc_UPitt/Calibration/ANN_BUGS_Cleaned/")
# Input parameters
n_iter <- 10000
n_chains <- 7
# Generate data
X <- rpois(100, 10)
r <- rnorm(100,0,1)
Y <- X + r
# Stan data
stan.dat = list(
n = 100,
y = Y
)
Y
# Generate data
real_lambda = 10
X <- rpois(100, real_lambda)
r <- rnorm(100,0,1)
Y <- X + r
# Stan data
stan.dat = list(
n = 100,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
# Set working directory
setwd("/Users/kyulee/Google Drive/Z Drive/Postdoc_UPitt/Calibration/ANN_BUGS_Cleaned/Influenza-github/")
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
summary(s0)
s_df <- extract(s0)
lambda <- s_df$lambda
lambda
lambda_df <- as.data.frame(lambda)
labmda_df
lambda_df
ggplot(lambda_df)+
geom_density(alpha=0.1)+
geom_vline(xintercept = real_lambda)
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda)
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
real_lambda = 20
X <- rpois(100, real_lambda)
r <- rnorm(100,0,1)
Y <- X + r
# Stan data
stan.dat = list(
n = 100,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
real_lambda = 20
n_data = 1000
X <- rpois(n_data, real_lambda)
r <- rnorm(n_data,0,1)
Y <- X + r
# Stan data
stan.dat = list(
n = n_data,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
# Generate data with generic lambda value
real_lambda = 100
n_data = 1000
X <- rpois(n_data, real_lambda)
r <- rnorm(n_data,0,1)
Y <- X + r
# Stan data
stan.dat = list(
n = n_data,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
n_data = 10000
X <- rpois(n_data, real_lambda)
r <- rnorm(n_data,0,1)
Y <- X + r
stan.dat = list(
n = n_data,
y = Y
)
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
# Generate data with generic lambda value
real_lambda = 5
n_data = 10000
X <- rpois(n_data, real_lambda)
r <- rnorm(n_data,0,1)
Y <- X + r
# Stan data
stan.dat = list(
n = n_data,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
lambda_df
Y
r <- abs(rnorm(n_data,0,1))
Y <- X + r
# Stan data
stan.dat = list(
n = n_data,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
real_lambda = 100
n_data = 1000
X <- rpois(n_data, real_lambda)
r <-  rnorm(n_data,0,1)
Y <- X + r # make sure none of Y values are negative!
# Stan data
stan.dat = list(
n = n_data,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
real_lambda = 100
n_data = 1
X <- rpois(n_data, real_lambda)
r <-  rnorm(n_data,0,1)
Y <- X + r # make sure none of Y values are negative!
Y
stan.dat = list(
n = n_data,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
n_data = 2
X <- rpois(n_data, real_lambda)
r <-  rnorm(n_data,0,1)
Y <- X + r # make sure none of Y values are negative!
# Stan data
stan.dat = list(
n = n_data,
y = Y
)
n_data = 2
X <- rpois(n_data, real_lambda)
r <-  rnorm(n_data,0,1)
Y <- X + r # make sure none of Y values are negative!
# Stan data
stan.dat = list(
n = n_data,
y = Y
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
Y
real_lambda = 100
n_data = 1
X <- rpois(n_data, real_lambda)
r <-  rnorm(n_data,0,1)
Y <- X + r # make sure none of Y values are negative!
stan.dat = list(
n = n_data,
y = c(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
as.matrix(Y)
as.vector(Y)
stan.dat = list(
n = n_data,
y = as.matrix(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
t(as.vector(Y))
as.array(Y)
stan.dat = list(
n = n_data,
y = as.array(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
Y
mean(lambda)
targets <- read.csv("data/EndOfGenAPMC_Target_vector.csv")
# Set working directory
setwd("/Users/kyulee/Google Drive/Z Drive/Postdoc_UPitt/Calibration/ANN_BUGS_Cleaned/")
targets <- read.csv("data/EndOfGenAPMC_Target_vector.csv")
targets <- t(targets$x)
targets <- cbind(targets, 50,50,50,50) #cbind(targets, 182,182,182,182) # 1 is placeholder for peak date
colnames(targets) <- c("T1.12","T2.12","T3.12","T4.12","T1.13","T2.13","T3.13","T4.13","T1.14","T2.14","T3.14","T4.14","T1.15","T2.15","T3.15","T4.15","peak1","peak2","peak3","peak4" )
targets
Y = targets
targets <- read.csv("data/EndOfGenAPMC_Target_vector.csv")
targets <- t(targets$x)
targets
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.array(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
# Set working directory
setwd("/Users/kyulee/Google Drive/Z Drive/Postdoc_UPitt/Calibration/ANN_BUGS_Cleaned/Influenza-github/")
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.array(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
Y
as.vector(Y)
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
as.vector(Y)
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = real_lambda, color='red')
print(s0)
Y
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
print(s0)
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
print(s0)
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
targets
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
print(s0)
s_df <- extract(s0)
lambda <- s_df$lambda
lambda_df <- as.data.frame(lambda)
# Plot estimated labmda vs real lambda
ggplot(lambda_df, aes(lambda))+
geom_density()+
geom_vline(xintercept = targets, color='red')
plot(targets, lambda)
plot(targets, colMeans(lambda))
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
summary(s0)
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
print(s0)
n_data = 16
Y = targets
# Stan data
stan.dat = list(
n = n_data,
y = as.vector(Y)
)
# Run stan
s0 <- stan(file = "code/poisson_test.stan", data = stan.dat, iter = n_iter, chains = n_chains,
pars = c("lambda") )#, control = list(adapt_delta = 0.9,max_treedepth = 15))
print(s0)
